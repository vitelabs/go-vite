// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vitelabs/go-vite/consensus (interfaces: Chain)

// Package consensus is a generated GoMock package.
package consensus

import (
	gomock "github.com/golang/mock/gomock"
	leveldb "github.com/syndtr/goleveldb/leveldb"
	chain "github.com/vitelabs/go-vite/chain"
	types "github.com/vitelabs/go-vite/common/types"
	ledger "github.com/vitelabs/go-vite/ledger"
	big "math/big"
	reflect "reflect"
	time "time"
)

// MockChain is a mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// GetAllRegisterList mocks base method
func (m *MockChain) GetAllRegisterList(arg0 types.Hash, arg1 types.Gid) ([]*types.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRegisterList", arg0, arg1)
	ret0, _ := ret[0].([]*types.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRegisterList indicates an expected call of GetAllRegisterList
func (mr *MockChainMockRecorder) GetAllRegisterList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRegisterList", reflect.TypeOf((*MockChain)(nil).GetAllRegisterList), arg0, arg1)
}

// GetConfirmedBalanceList mocks base method
func (m *MockChain) GetConfirmedBalanceList(arg0 []types.Address, arg1 types.TokenTypeId, arg2 types.Hash) (map[types.Address]*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfirmedBalanceList", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[types.Address]*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfirmedBalanceList indicates an expected call of GetConfirmedBalanceList
func (mr *MockChainMockRecorder) GetConfirmedBalanceList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfirmedBalanceList", reflect.TypeOf((*MockChain)(nil).GetConfirmedBalanceList), arg0, arg1, arg2)
}

// GetConsensusGroupList mocks base method
func (m *MockChain) GetConsensusGroupList(arg0 types.Hash) ([]*types.ConsensusGroupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsensusGroupList", arg0)
	ret0, _ := ret[0].([]*types.ConsensusGroupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsensusGroupList indicates an expected call of GetConsensusGroupList
func (mr *MockChainMockRecorder) GetConsensusGroupList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsensusGroupList", reflect.TypeOf((*MockChain)(nil).GetConsensusGroupList), arg0)
}

// GetContractMeta mocks base method
func (m *MockChain) GetContractMeta(arg0 types.Address) (*ledger.ContractMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractMeta", arg0)
	ret0, _ := ret[0].(*ledger.ContractMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractMeta indicates an expected call of GetContractMeta
func (mr *MockChainMockRecorder) GetContractMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractMeta", reflect.TypeOf((*MockChain)(nil).GetContractMeta), arg0)
}

// GetGenesisSnapshotBlock mocks base method
func (m *MockChain) GetGenesisSnapshotBlock() *ledger.SnapshotBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisSnapshotBlock")
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	return ret0
}

// GetGenesisSnapshotBlock indicates an expected call of GetGenesisSnapshotBlock
func (mr *MockChainMockRecorder) GetGenesisSnapshotBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisSnapshotBlock", reflect.TypeOf((*MockChain)(nil).GetGenesisSnapshotBlock))
}

// GetLastUnpublishedSeedSnapshotHeader mocks base method
func (m *MockChain) GetLastUnpublishedSeedSnapshotHeader(arg0 types.Address, arg1 time.Time) (*ledger.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastUnpublishedSeedSnapshotHeader", arg0, arg1)
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastUnpublishedSeedSnapshotHeader indicates an expected call of GetLastUnpublishedSeedSnapshotHeader
func (mr *MockChainMockRecorder) GetLastUnpublishedSeedSnapshotHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastUnpublishedSeedSnapshotHeader", reflect.TypeOf((*MockChain)(nil).GetLastUnpublishedSeedSnapshotHeader), arg0, arg1)
}

// GetLatestSnapshotBlock mocks base method
func (m *MockChain) GetLatestSnapshotBlock() *ledger.SnapshotBlock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSnapshotBlock")
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	return ret0
}

// GetLatestSnapshotBlock indicates an expected call of GetLatestSnapshotBlock
func (mr *MockChainMockRecorder) GetLatestSnapshotBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSnapshotBlock", reflect.TypeOf((*MockChain)(nil).GetLatestSnapshotBlock))
}

// GetRandomSeed mocks base method
func (m *MockChain) GetRandomSeed(arg0 types.Hash, arg1 int) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomSeed", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetRandomSeed indicates an expected call of GetRandomSeed
func (mr *MockChainMockRecorder) GetRandomSeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomSeed", reflect.TypeOf((*MockChain)(nil).GetRandomSeed), arg0, arg1)
}

// GetRegisterList mocks base method
func (m *MockChain) GetRegisterList(arg0 types.Hash, arg1 types.Gid) ([]*types.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterList", arg0, arg1)
	ret0, _ := ret[0].([]*types.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisterList indicates an expected call of GetRegisterList
func (mr *MockChainMockRecorder) GetRegisterList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterList", reflect.TypeOf((*MockChain)(nil).GetRegisterList), arg0, arg1)
}

// GetSnapshotBlockByHash mocks base method
func (m *MockChain) GetSnapshotBlockByHash(arg0 types.Hash) (*ledger.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBlockByHash", arg0)
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBlockByHash indicates an expected call of GetSnapshotBlockByHash
func (mr *MockChainMockRecorder) GetSnapshotBlockByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlockByHash", reflect.TypeOf((*MockChain)(nil).GetSnapshotBlockByHash), arg0)
}

// GetSnapshotBlockByHeight mocks base method
func (m *MockChain) GetSnapshotBlockByHeight(arg0 uint64) (*ledger.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotBlockByHeight", arg0)
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotBlockByHeight indicates an expected call of GetSnapshotBlockByHeight
func (mr *MockChainMockRecorder) GetSnapshotBlockByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotBlockByHeight", reflect.TypeOf((*MockChain)(nil).GetSnapshotBlockByHeight), arg0)
}

// GetSnapshotHeaderBeforeTime mocks base method
func (m *MockChain) GetSnapshotHeaderBeforeTime(arg0 *time.Time) (*ledger.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeaderBeforeTime", arg0)
	ret0, _ := ret[0].(*ledger.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeaderBeforeTime indicates an expected call of GetSnapshotHeaderBeforeTime
func (mr *MockChainMockRecorder) GetSnapshotHeaderBeforeTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeaderBeforeTime", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeaderBeforeTime), arg0)
}

// GetSnapshotHeadersAfterOrEqualTime mocks base method
func (m *MockChain) GetSnapshotHeadersAfterOrEqualTime(arg0 *ledger.HashHeight, arg1 *time.Time, arg2 *types.Address) ([]*ledger.SnapshotBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotHeadersAfterOrEqualTime", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*ledger.SnapshotBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotHeadersAfterOrEqualTime indicates an expected call of GetSnapshotHeadersAfterOrEqualTime
func (mr *MockChainMockRecorder) GetSnapshotHeadersAfterOrEqualTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotHeadersAfterOrEqualTime", reflect.TypeOf((*MockChain)(nil).GetSnapshotHeadersAfterOrEqualTime), arg0, arg1, arg2)
}

// GetVoteList mocks base method
func (m *MockChain) GetVoteList(arg0 types.Hash, arg1 types.Gid) ([]*types.VoteInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoteList", arg0, arg1)
	ret0, _ := ret[0].([]*types.VoteInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteList indicates an expected call of GetVoteList
func (mr *MockChainMockRecorder) GetVoteList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteList", reflect.TypeOf((*MockChain)(nil).GetVoteList), arg0, arg1)
}

// IsGenesisSnapshotBlock mocks base method
func (m *MockChain) IsGenesisSnapshotBlock(arg0 types.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGenesisSnapshotBlock", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGenesisSnapshotBlock indicates an expected call of IsGenesisSnapshotBlock
func (mr *MockChainMockRecorder) IsGenesisSnapshotBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGenesisSnapshotBlock", reflect.TypeOf((*MockChain)(nil).IsGenesisSnapshotBlock), arg0)
}

// NewDb mocks base method
func (m *MockChain) NewDb(arg0 string) (*leveldb.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDb", arg0)
	ret0, _ := ret[0].(*leveldb.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDb indicates an expected call of NewDb
func (mr *MockChainMockRecorder) NewDb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDb", reflect.TypeOf((*MockChain)(nil).NewDb), arg0)
}

// Register mocks base method
func (m *MockChain) Register(arg0 chain.EventListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register
func (mr *MockChainMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockChain)(nil).Register), arg0)
}

// UnRegister mocks base method
func (m *MockChain) UnRegister(arg0 chain.EventListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegister", arg0)
}

// UnRegister indicates an expected call of UnRegister
func (mr *MockChainMockRecorder) UnRegister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegister", reflect.TypeOf((*MockChain)(nil).UnRegister), arg0)
}
